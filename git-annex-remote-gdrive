#!/bin/bash
# git-annex-remote-gdrive - wrapper around gdrive to add direct support for Google Drive to bypass some very annoying speed issues I was having with Google Drive via rclone.
#
# Install in PATH as git-annex-remote-gdrive
#
# Copyright (C) 2017  Silvio Ankermann
#
# This program is free software: you can redistribute it and/or modify it under the terms of version 3 of the GNU
# General Public License as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# Based on work originally copyright 2016-2017 Daniel Dent which was licenced under the GNU GPL version 3.
#

set -e

# This program speaks a line-based protocol on stdin and stdout.
# When running any commands, their stdout should be redirected to stderr
# (or /dev/null) to avoid messing up the protocol.
runcmd () {
	"$@" >&2
}

# Gets a value from the remote's configuration, and stores it in RET
getconfig () {
	ask GETCONFIG "$1"
}

# Stores a value in the remote's configuration.
setconfig () {
	echo SETCONFIG "$1" "$2"
}

validate_layout() {
	if [ -z "$GDRIVE_LAYOUT" ]; then
		GDRIVE_LAYOUT="nodir"
	fi
	case "$GDRIVE_LAYOUT" in
		lower|directory|nodir|mixed|frankencase)
			;;
		*)
			return 1
			;;
	esac		
}

# Sets FID to the parent id to use to store a key.
calcparent () {
	case "$GDRIVE_LAYOUT" in
		lower)
			ask DIRHASH-LOWER "$1"
			getfolderid "$RET"
			;;
		directory)
			ask DIRHASH-LOWER "$1"
			getfolderid "$RET$1"
			;;
		nodir)
			FID="$ROOT_ID"
			;;	
		mixed)
			ask DIRHASH "$1"
			getfolderid "$RET"
			;;
		frankencase)
			ask DIRHASH "$1"
			lret=$(echo $RET|tr A-Z a-z)
			getfolderid "$lret"
			;;
	esac
}

# Gets the ID of a specified directory by recursively traversing the path and creating folders where necessary
# Stores it in FID
# Not really fast, but got no better solution yet
# layout nodir doesn't use this which makes it the best option for Google Drive
getfolderid () {
	local path
	IFS='/' read -r -a path <<< "$@"
	local id=$ROOT_ID
	local new_id
	local folder_result
	for dir in "${path[@]}"
	do
		echo "getfolderid: dir="$dir >&2
		if ! folder_result=$(gdrive list -m 1 -q "'$id' in parents and name = '$dir' and trashed = false" --no-header)
		then return 1
		fi
		new_id=$(echo $folder_result | awk '{print $1;}')
		echo "getfolderid: found "$new_id >&2
		if [ -z "$new_id" ]; then
			if ! folder_result=$(gdrive mkdir -p $id $dir)
			then return 2
			fi
			id=$(echo $folder_result | awk '{print $2;}')
			echo "getfolderid: created "$id >&2
		else
			id=$new_id
		fi
	done
	FID=$id
}

# Asks for some value, and stores it in RET
ask () {
	echo "$1" "$2"
	read -r resp
    # Strip trailing carriage return, if present
    resp="${resp%$'\r'}"
	if echo $resp|grep '^VALUE '>/dev/null; then
	    RET=$(echo "$resp" | cut -f2- -d' ')
	fi
}

# Needed by getfolderid before it is set in INITREMOTE or PREPARE
ROOT_ID='root'

# This has to come first, to get the protocol started.
echo VERSION 1

while read -r line; do
    # Strip trailing carriage return, if present
    line="${line%$'\r'}"
	set -- $line
	case "$1" in
		INITREMOTE)
			# Do anything necessary to create resources
			# used by the remote. Try to be idempotent.
			# 
			# Use GETCONFIG to get any needed configuration
			# settings, and SETCONFIG to set any persistent
			# configuration settings.
			# 
			# (Note that this is not run every time, only when
			# git annex initremote or git annex enableremote is
			# run.)

			getconfig prefix
			REMOTE_PREFIX=$RET
			if [ -z "$REMOTE_PREFIX" ]; then
                		REMOTE_PREFIX="git-annex"
			fi
			if [ "$REMOTE_PREFIX" == "/" ]; then
		                echo INITREMOTE-FAILURE "storing objects directly in the root (/) is not supported"
				exit 1
			fi
			setconfig prefix $REMOTE_PREFIX

			getconfig config_path
			CONFIG_PATH=$RET
			setconfig config_path $CONFIG_PATH

			getconfig traverse
			TRAVERSE_MODE=$RET
			setconfig traverse $TRAVERSE_MODE
			
			getconfig gdrive_layout
			GDRIVE_LAYOUT=$RET
			if ! validate_layout; then
				echo "INITREMOTE-FAILURE gdrive_layout setting not recognized"
				exit 1
			fi
			setconfig gdrive_layout $GDRIVE_LAYOUT

			if [ -z "$CONFIG_PATH" ]; then
				CONFIG_PATH="~/.gdrive"
			fi

           		if getfolderid $REMOTE_PREFIX; then
				ROOT_ID="$FID"
				setconfig root_id $ROOT_ID
           			echo INITREMOTE-SUCCESS
           		else
           	     		echo INITREMOTE-FAILURE "Failed to create directory on remote. Ensure that gdrive has been configured correctly and has permission to access your Drive."
				exit 1
           	 	fi
		;;
		PREPARE)
			# Use GETCONFIG to get configuration settings,
			# and do anything needed to get ready for using the
			# special remote here.

			getconfig prefix
			REMOTE_PREFIX="$RET"

			if ! getfolderid "$REMOTE_PREFIX"; then
           	     		PREPARE_FAILURE="Failed to create directory on remote. Ensure that gdrive has been configured correctly and has permission to access your Drive."
			fi

			ROOT_ID="$FID"
			getconfig root_id

			if [[ $ROOT_ID != $RET ]]; then
				PREPARE_FAILURE="ID of root folder changed. Was the repo moved? Please check remote and re-run git annex enableremote"
			fi
			
			getconfig config_path 
			CONFIG_PATH="$RET"
			
			getconfig traverse
			TRAVERSE_MODE=$RET
			echo $TRAVERSE_MODE >&2
			
			getconfig gdrive_layout
			GDRIVE_LAYOUT="$RET"
			if ! validate_layout; then
				PREPARE_FAILURE="gdrive_layout setting not recognized. Please check remote and re-run git annex enableremote"
			fi

			if [ -z "$PREPARE_FAILURE" ]; then
				echo PREPARE-SUCCESS
			else
				echo PREPARE-FAILURE "$PREPARE_FAILURE"
				exit 1
			fi
		;;
		TRANSFER)
			key="$3"
			file="$4"
			case "$2" in
				STORE)
					# Store the file to a location
					# based on the key. Check if present first.
					# XXX when at all possible, send PROGRESS
					if [ ! -e "$file" ]; then
						echo TRANSFER-FAILURE STORE "$key" "asked to store non-existent file $file"
					else	
						if [[ $TRAVERSE_MODE == "relaxed" ]]; then
							query="name = '$key' and trashed = false"
						else
							calcparent $key
							query="name = '$key' and '$FID' in parents and trashed = false"
						fi

						if (gdrive list -q "$query" --no-header --name-width 0 2>&1 | grep "$key" &>/dev/null) ||
							(calcparent "$key" && runcmd gdrive upload -p $FID "$file")
						then
							echo TRANSFER-SUCCESS STORE "$key"
						else
							echo TRANSFER-FAILURE STORE "$key"
						fi
					fi
				;;
				RETRIEVE)
					# Retrieve from a location based on
					# the key, outputting to the file.
					# XXX when easy to do, send PROGRESS
					#
					# How to handle keys that are available multiple times?
					# At present we just take the first. Not sure if that's going to be a problem
					if [[ $TRAVERSE_MODE == "relaxed" ]]; then
						query="name = '$key' and trashed = false"
					else
						calcparent $key
						query="name = '$key' and '$FID' in parents and trashed = false"
					fi
					FID=$(gdrive list -q "$query" -m 1 --no-header | awk '{print $1}')
					# http://stackoverflow.com/questions/31396985/why-is-mktemp-on-os-x-broken-with-a-command-that-worked-on-linux
					if GA_RC_TEMP_DIR=$(mktemp -d "${TMPDIR:-/tmp}/gdrive-annex-tmp.XXXXXXXXX") &&
					    runcmd gdrive download $FID --path $GA_RC_TEMP_DIR &&
					    mv $GA_RC_TEMP_DIR/$key $file &&
					    rmdir $GA_RC_TEMP_DIR; then
						echo TRANSFER-SUCCESS RETRIEVE "$key"
					else
						echo TRANSFER-FAILURE RETRIEVE "$key"
					fi
				;;
			esac
		;;
		CHECKPRESENT)
			key="$2"
			if [[ $TRAVERSE_MODE == "relaxed" ]]; then
				query="name = '$key' and trashed = false"
			else
				calcparent $key
				query="name = '$key' and '$FID' in parents and trashed = false"
			fi

			if ! check_result=$(gdrive list -q "$query" --no-header --bytes --name-width 0 2>&1)
			then
				echo CHECKPRESENT-UNKNOWN "$key" "remote currently unavailable or git-annex-remote-gdrive failed to parse gdrive output"
			else
				if echo $check_result|grep "$key" &>/dev/null
				then
					echo CHECKPRESENT-SUCCESS "$key"
				else
					echo CHECKPRESENT-FAILURE "$key"
				fi
			fi
		;;
		REMOVE)
			key="$2"
			calcparent "$key"
			query="name = '$key' and '$FID' in parents and trashed = false"
			# Note that it's not a failure to remove a
			# key that is not present.
			if [[ ! $(gdrive list -q "$query" --no-header 2>&1) ]]
			then
				echo REMOVE-SUCCESS "$key"
			else
				FID=$(gdrive list -q "$query" -m 1 --no-header | awk '{print $1}')
				if runcmd gdrive delete "$FID"; then
		                	echo REMOVE-SUCCESS "$key"
	                	else
                		        echo REMOVE-FAILURE "$key"
				fi
			fi
		;;
		*)
			# The requests listed above are all the ones
			# that are required to be supported, so it's fine
			# to say that any other request is unsupported.
			echo UNSUPPORTED-REQUEST
		;;
	esac	
done


# XXX anything that needs to be done at shutdown can be done here
